// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4915.ArcadeDriveRobot.subsystems;
import org.usfirst.frc4915.ArcadeDriveRobot.RobotMap;
import org.usfirst.frc4915.ArcadeDriveRobot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor = RobotMap.driveTrainLeftMotor;
    SpeedController rightMotor = RobotMap.driveTrainRightMotor;
    RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ArcadeDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    /** getRobotDrive
     * 
     * Public method to return robotDrive
     * v 1.03.01
     * @return robotDrive The actual robotDrive.
     */
    public RobotDrive getRobotDrive() {
        return robotDrive;
    }
    
    /** arcadeDrive
     * 
     * Public method to enable arcade drive using a joystick.
     * v 1.03.01
     * @param stick A joystick.
     */
    public void arcadeDrive(Joystick stick) {
        robotDrive.arcadeDrive(stick);
    }
    
    /** driveStraight
     * 
     * Public method to drive straight at speed
     * v 1.03.01
     * @param speed Motor speed. Value should be between -1 and 1
     */
    
    public void driveStraight(double speed) {
        robotDrive.tankDrive(speed, speed);
    }
    
    /** stop
     * 
     * public method to stop the drive train
     * v 1.03.01
     */
    public void stop() {
        robotDrive.tankDrive(0, 0);
    }
    
    public void turn(double angle) {
        double degreesOfFreedom = 2.0;
        RobotMap.gyroscopeSensor.reset();
        while (RobotMap.gyroscopeSensor.getAngle() <= angle - degreesOfFreedom) {
            robotDrive.tankDrive(0.5, -0.5);
        }
        stop();
    }
}
