// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4915.ArcadeDriveRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainRightMotor;
    public static SpeedController driveTrainLeftMotor;
    public static RobotDrive driveTrainRobotDrive;
    public static DoubleSolenoid harvesterPneumaticAnglers;
    public static SpeedController harvesterCollectionWheels;
    public static Compressor airCompressorCompressor;
    public static Encoder launcherQuadratureEncoder;
    public static SpeedController launcherWindingMotor;
    public static PIDController launcherLauncherMotor;
    public static Solenoid launcherGearboxPneumatics;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainRightMotor = new Victor(1, 1);
	LiveWindow.addActuator("Drive Train", "Right Motor", (Victor) driveTrainRightMotor);
        
        driveTrainLeftMotor = new Victor(1, 2);
	LiveWindow.addActuator("Drive Train", "Left Motor", (Victor) driveTrainLeftMotor);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotor, driveTrainRightMotor);
	
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        
        harvesterPneumaticAnglers = new DoubleSolenoid(1, 1, 2);      
	
        
        harvesterCollectionWheels = new Talon(1, 3);
	LiveWindow.addActuator("Harvester", "Collection Wheels", (Talon) harvesterCollectionWheels);
        
        airCompressorCompressor = new Compressor(1, 1, 1, 1);
	
        
        launcherQuadratureEncoder = new Encoder(1, 2, 1, 3, false, EncodingType.k4X);
	LiveWindow.addSensor("Launcher", "Quadrature Encoder", launcherQuadratureEncoder);
        launcherQuadratureEncoder.setDistancePerPulse(1.0);
        launcherQuadratureEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        launcherQuadratureEncoder.start();
        launcherWindingMotor = new Talon(1, 3);
	LiveWindow.addActuator("Launcher", "Winding Motor", (Talon) launcherWindingMotor);
        
        launcherLauncherMotor = new PIDController(1.0, 0.0, 0.0, 0.0, launcherQuadratureEncoder, launcherWindingMotor, 0.02);
	LiveWindow.addActuator("Launcher", "Launcher Motor", launcherLauncherMotor);
        launcherLauncherMotor.setContinuous(false); launcherLauncherMotor.setAbsoluteTolerance(0.2); 
        launcherLauncherMotor.setOutputRange(-1.0, 1.0);        
        launcherGearboxPneumatics = new Solenoid(1, 3);
	LiveWindow.addActuator("Launcher", "Gearbox Pneumatics", launcherGearboxPneumatics);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
